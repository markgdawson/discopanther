- data.gigs.each do |gig|
  - gig[:parsed_date] = Date.strptime(gig["date"],"%d/%m/%Y")
  
  - if gig.has_key? "end_date"
    - gig[:parsed_end_date] = Date.strptime(gig["end_date"],"%d/%m/%Y")
    - if gig[:parsed_end_date].month != gig[:parsed_date].month
      - gig[:display_date] = gig[:parsed_date].strftime("#{ gig[:parsed_date].day.ordinalize } %B") + " - " + gig[:parsed_end_date].strftime("#{ gig[:parsed_date].day.ordinalize } %B %Y")
    -else
      - gig[:display_date] = gig[:parsed_date].strftime("#{ gig[:parsed_date].day.ordinalize } - #{gig[:parsed_end_date].day.ordinalize }  %B %Y")
  - else
    - gig[:display_date] = gig[:parsed_date].strftime("#{ gig[:parsed_date].day.ordinalize } %B %Y")

- future_gigs = data.gigs.select { |gig| gig[:parsed_date] >= Time.now.to_date }.sort_by { |gig| gig[:parsed_date] }
- past_gigs = data.gigs.select { |gig| gig[:parsed_date] < Time.now.to_date }.sort_by { |gig| gig[:parsed_date] }.reverse

.future_gigs
  %h2 Upcoming Gigs

- future_gigs.each_with_index do |gig, index|
  = partial(:gig_listing, :locals => { :gig => gig, :index => index })

.past_gigs
  %h2 Past Gigs

- past_gigs.each_with_index do |gig, index|
  = partial(:gig_listing, :locals => { :gig => gig, :index => index })